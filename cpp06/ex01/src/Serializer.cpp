#include "Serializer.hpp"

// この関数はData型オブジェクトへのポインタ(Data* ptr)をパラメータとして受け取ります。
// reinterpret_castを使ってポインタを整数型（uintptr_t）に変換し、オブジェクトのメモリアドレスを符号なし整数として扱います。
// 結果はDataオブジェクトのメモリアドレスの整数表現です。
uintptr_t Serializer::serialize(Data* ptr)
{
	return reinterpret_cast<uintptr_t>(ptr);
}

// この関数は整数（uintptr_t raw）をパラメータとして受け取ります。
// reinterpret_castを使って整数をData*型のポインタに戻します。
// 結果は元のDataオブジェクトへのポインタです。
Data* Serializer::deserialize(uintptr_t raw)
{
	return reinterpret_cast<Data*>(raw);
}

/**
 * 使用例：この種のシリアライゼーションは非常に低レベルで、シリアライゼーションとデシリアライゼーションの間でDataオブジェクトのメモリレイアウトが変わらないという仮定に依存しています。オブジェクトにポインタや参照が含まれている場合や、
 * コンパイラの最適化やコードの変更によってオブジェクトのレイアウトが変更された場合は扱えません。

安全： この方法で生のポインタとreinterpret_castを使用すると、エラーが発生しやすく、注意深く行わないと未定義の動作につながる可能性があります。
オブジェクトのメモリーレイアウトとアライメントが、異なる実行やプラットフォームでも一貫していることが前提です。

別のアプローチ より堅牢で移植性の高いシリアライズ/デシリアライズを行うには、Protocol BuffersやJSON、その他のシリアライズ形式のようなライブラリの使用を検討するとよいでしょう。
これらのライブラリは、さまざまなデータ型や入れ子構造を扱うことができ、コードベースの変更に強く設計されています。

  */
